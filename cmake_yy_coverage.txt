#
#
#  MIT License
#
#  Copyright (c) 2024 Yafiyogi
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.
#

# * 'coverage': build & run tests create coverage pages
# * 'coverage-page': create coverage pages
# * 'coverage-clean': delete coverage data files (*.gcda)
# * 'coverage-deep-clean': delete all coverage files (*.gcda & *.gcno)

if("${yy_build_type}" STREQUAL "coverage")

include(${YY_CMAKE}/cmake_fastcov.txt)

# Add new build types
message("* Adding Coverage build types...")

# Linux
SET(YY_LINUX_COVERAGE_OPTIONS
    "" )

# MacOs
SET(YY_MACOS_COVERAGE_OPTIONS
    "" )

if("${yy_system_name}" STREQUAL "darwin")
  set(YY_COVERAGE_OPTIONS "${YY_MACOS_COVERAGE_OPTIONS}")
elseif("${yy_system_name}" STREQUAL "linux")
  set(YY_COVERAGE_OPTIONS "${YY_LINUX_COVERAGE_OPTIONS}")
else()
  set(YY_COVERAGE_OPTIONS "")
endif()

SET(CMAKE_CXX_FLAGS_COVERAGE
    "${YY_DEBUG_FLAGS} -O0 -fprofile-arcs -ftest-coverage -fno-omit-frame-pointer ${YY_COVERAGE_OPTIONS}"
    CACHE STRING "Flags used by the C++ compiler during coverage builds."
    FORCE )
SET(CMAKE_C_FLAGS_COVERAGE
    "${YY_DEBUG_FLAGS} -O0 -fprofile-arcs -ftest-coverage -fno-omit-frame-pointer ${YY_COVERAGE_OPTIONS}"
    CACHE STRING "Flags used by the C compiler during coverage builds."
    FORCE )
SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE
    ""
    CACHE STRING "Flags used for linking binaries during coverage builds."
    FORCE )
SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE
    ""
    CACHE STRING "Flags used by the shared libraries linker during coverage builds."
    FORCE )
MARK_AS_ADVANCED(
    CMAKE_CXX_FLAGS_COVERAGE
    CMAKE_C_FLAGS_COVERAGE
    CMAKE_EXE_LINKER_FLAGS_COVERAGE
    CMAKE_SHARED_LINKER_FLAGS_COVERAGE )

#set(FASTCOV_CMD "python3 -m fastcov")

function(add_cmake_coverage target_name target)

cmake_path(GET PROJECT_SOURCE_DIR PARENT_PATH YY_PROJECT_SOURCE_PARENT_DIR)

add_custom_target(coverage
  COMMAND ${CMAKE_MAKE_PROGRAM} coverage-clean "${target}" coverage-page )

add_custom_target(coverage-page
  COMMAND ${FASTCOV_CMD} --include "${YY_PROJECT_SOURCE_PARENT_DIR}" --exclude "${PROJECT_SOURCE_DIR}" --search-directory .. --process-gcno --output "${target_name}-gcov.json"
  COMMAND ${FASTCOV_CMD} -C "${target_name}-gcov.json" --lcov --output "${target_name}-gcov.info"
  COMMAND genhtml -o "${target_name}-gcov.html" "${target_name}-gcov.info" )

add_custom_target(coverage-clean
  COMMAND find "${CMAKE_BINARY_DIR}" -name '*.gcda' -delete )

add_custom_target(coverage-deep-clean
  COMMAND find "${CMAKE_BINARY_DIR}" "\\(" -name '*.gcda' -o -name '*.gcno' "\\)" -delete )

endfunction()

else()

function(add_cmake_coverage target_name target)
  # do nothing
endfunction()

endif()
